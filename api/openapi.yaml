openapi: 3.0.2
info:
  title: Firebit API
  version: 1.0.0
  description: "API for the [Firebit](https://firebit.com) platform, a place to share experiences with your friends"
  termsOfService: https://firebit.com/tos
  license:
    name: Apache 2.0 license
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.firebit.com/v1
  - url: https://firebit.com/api/v1
paths:
  /auth/login:
    post:
      summary: Login to your account
      tags:
        - auth
      responses:
        200:
          description: OK
  /auth/logout:
    post:
      summary: Logout of your account
      tags:
        - auth
      responses:
        200:
          description: OK
  /auth/api-token-auth:
    post:
      summary: Refresh token (or so)
      tags:
        - auth
      responses:
        200:
          description: OK
  /auth/resetPassword:
    post:
      summary: Request a password reset email (or so)
      tags:
        - auth
      responses:
        200:
          description: OK

  /bit:
    get:
      summary: Get all bits (based on permissions)
      tags:
        - bits
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bit"
            application/yaml:
              schema:
                $ref: "#/components/schemas/Bit"
            application/xml:
              schema:
                $ref: "#/components/schemas/Bit"
      # parameters:
      # - name: filter
      #   in: query
      # schema:
      #   type: string
    post:
      summary: Create a new bit
      tags:
        - bits
      requestBody:
        description: Bit to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bit"
      responses:
        # OR 201 (Created)?
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bit"
            application/yaml:
              schema:
                $ref: "#/components/schemas/Bit"
            application/xml:
              schema:
                $ref: "#/components/schemas/Bit"
        400:
          description: Invalid bit options supplied
        401:
          description: Not logged in
  /bit/{bitId}:
    get:
      summary: Get a bit by ID
      tags:
        - bits
      parameters:
        - name: bitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bit"
            application/yaml:
              schema:
                $ref: "#/components/schemas/Bit"
            application/xml:
              schema:
                $ref: "#/components/schemas/Bit"
        400:
          description: Invalid ID supplied
        404:
          description: Bit not found
    put:
      summary: Update a bit by ID
      tags:
        - bits
      parameters:
        - name: bitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Bit to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bit"
      responses:
        # 201 Created instead, if resource was created, otherwise 200 OK or 204 No Content
        200:
          description: OK
          # PUT response has no body (in contrast to POST)
        400:
          description: Invalid ID or bit supplied
        401:
          description: Not logged in
        403:
          description: Not permitted to update this bit
        404:
          description: Bit not found
    delete:
      summary: Delete a bit by ID
      tags:
        - bits
      parameters:
        - name: bitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        # OR 204 No Content, if "no furhter information is to be supplied"
        200:
          description: OK
        400:
          description: Invalid ID or bit supplied
        401:
          description: Not logged in
        403:
          description: Not permitted to update this bit
        404:
          description: Bit not found

  /bit/{bitId}/comment:
    get:
      summary: Get all comments of bit
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    post:
      summary: Create a comment
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    delete:
      summary: Delete a comment
      tags:
        - a bit of everything
      responses:
        200:
          description: OK

  /bit/{bitId}/like:
    get:
      summary: Get all likes of a bit
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    post:
      summary: Like the bit (or dislike)
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    put:
      summary: Update like "state" (e.g. remove)
      tags:
        - a bit of everything
      responses:
        200:
          description: OK

  /bit/{bitId}/bookmark:
    get:
      summary: Get all bookmarks of a bit
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    post:
      summary: Bookmark the bit (or remove boomark)
      tags:
        - a bit of everything
      responses:
        200:
          description: OK
    put:
      summary: Update boomark "state" (e.g. remove)
      tags:
        - a bit of everything
      responses:
        200:
          description: OK

  /user/create:
    post:
      summary: Create user
      tags:
        - user
      requestBody:
        description: Created user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Invalid user supplied
          content: {}
        401:
          description: You must be logged in to create a user
          content: {}
      security:
        - api_key: []
  /user/{username}:
    get:
      summary: Get user by user name
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing."
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    #TODO WIP
    put:
      summary: Update user profile
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}
    delete:
      summary: Delete a user
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}
  /user/{username}/friends:
    get:
      summary: Get all friends of a user
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}
    post:
      summary: Send a friend request to a user
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}
    put:
      summary: Update friendship (e.g. accept or block, ...)
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}
    delete:
      summary: Delete friendship (unfriend)
      tags:
        - user
      responses:
        200:
          description: OK
          content: {}

  /category:
    get:
      summary: Get all categories
      tags:
        - category
      responses:
        200:
          description: OK
          content: {}
    post:
      summary: Create a category
      tags:
        - category
      responses:
        200:
          description: OK
          content: {}
      security:
        - api_key: []
  /category/{categoryId}:
    get:
      summary: Get category by id
      tags:
        - category
      responses:
        200:
          description: OK
          content: {}
    put:
      summary: Update a category
      tags:
        - category
      responses:
        200:
          description: OK
          content: {}
      security:
        - api_key: []
    delete:
      summary: Delete a category
      tags:
        - category
      responses:
        200:
          description: OK
          content: {}
      security:
        - api_key: []

  /search/user:
    get:
      summary: Search for users
      tags:
        - user
      responses:
        200:
          description: OK
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
  /search/bit:
    get:
      summary: Search for bits
      tags:
        - bits
      responses:
        200:
          description: OK
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum:
              - title
              - hashtag
  /search/category:
    get:
      summary: Search for categories
      tags:
        - category
      responses:
        200:
          description: OK
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string

components:
  schemas:
    Bit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        author:
          $ref: "#/components/schemas/User"
        category:
          $ref: "#/components/schemas/Category"
        likes:
          type: integer
      required:
        - title
        - description
        - user
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        displayname:
          type: string
      required:
        - id
        - username
    Category:
      type: string
      enum:
        - food
        - movies
        - travelling
        - sports
        - tech
        - games
        - other

#
# Notes:

# # bits
# /bit
#   get
# /bit/create
#   post/put ?
# /bit/{bitId}
#   get
#   post/put ?
#   delete
# /bit/{bitId}/like
# /bit/{bitId}/bookmark
# /bit/{bitId}/comment

# # auth
# /auth/login
#   post
# /auth/register
#   post
# /auth/resetPassword
#   post

# # user -> firebit.com/user/xeeija OR firebit.com/xeeija
# /user/{username}
#   get
#   post/put
#   delete
# /user/{username}/settings ?
#   post
# /user/{username}/friends
#   get
# /user/{username}/friends/add
#   post
# /user/{username}/activities
# /user/{username}/activities/likes
# /user/{username}/activities/bookmarks
# /user/{username}/activities/comments
# # OR /user/{username}/activities/{type}

# # search -> /search/foo (returns "mixed" types: user, bit, category) OR /user/search, /bit/search, ...
# /search/{query}
#   get
